#server:
#  port: 10011 # 端口 1000X属于eureka端口
#spring:
#  application:
#    name: ep-gatway # 应用名称，会在Eureka中显示
#eureka:
#  client:
#    service-url:
##      defaultZone: http://10.20.9.43:10000/eureka/
#      defaultZone: http://10.20.9.43:10000/eureka/, http://10.20.9.43:10001/eureka/
#    registry-fetch-interval-seconds: 5
#  instance:
#    prefer-ip-address: true # 当调用getHostname获取实例的hostname时，返回ip而不是host名称
#    ip-address: 10.20.9.43 # 指定自己的ip信息，不指定的话会自己寻找
#    instance-id: ${spring.application.name}:${server.port} # DESKTOP-2MVEC12:user-service:8081：是示例的名称，instance-id是区分同一服务的不同实例的唯一标准，因此不能重复
#    #在注册服务完成以后，服务提供者会维持一个心跳（定时向EurekaServer发起Rest请求），告诉EurekaServer：“我还活着”。这个我们称为服务的续约（renew）；
#    # 默认情况下每个30秒服务会向注册中心发送一次心跳，证明自己还活着。如果超过90秒没有发送心跳，EurekaServer就会认为该服务宕机，“失效剔除”从服务列表中移除，这两个值在生产环境不要修改，默认即可。
#    # 在开发时，这个值有点太长了
#    # 服务续约(renew)的间隔，默认为30秒
#    lease-renewal-interval-in-seconds: 5
#    # 服务失效时间，默认值90秒
#    lease-expiration-duration-in-seconds: 10
#
#zuul:
#  prefix: /api   # 路由前缀
#  ignored-services: "*"  # 忽略的应用，不暴露接口
#  routes:
#    ep-client: /client/**   # 默认映射路径为ep-client: /ep-client/**
#    ep-product: /product/**
##  ignored-services:   # 忽略的应用，不暴露接口
##    - ep-product
#
#
## Zuul中默认就已经集成了Ribbon负载均衡和Hystix熔断机制。但是所有的超时策略都是走的默认值，比如熔断超时时间只有1S，很容易就触发了。因此建议我们手动进行配置：
## 设置全局Hystrix超时时间，Ribbon< hystrix, 因为ribbon重试没完，熔断了就麻烦了
## 超时：(1 + MaxAutoRetries ）*（1+ MaxAutoRetriesNextServer) *（ReadTimeout +ConnectTimeout）
#hystrix:
#  command:
#    default:  # 默认全局
#      circuitBreaker:
#        requestVolumeThreshold: 10 #  触发熔断的最小请求次数，默认20
#        errorThresholdPercentage: 50  # 触发熔断的失败请求最小占比，默认50%
#        sleepWindowInMilliseconds: 1000  # 休眠时长，默认是5000毫秒
#      execution:
#        timeout:
#          enable: true
#        isolation:
#          thread:
#            timeoutInMilliseconds: 12000 # 设置hystrix的超时时间为6000ms，默认1000ms
#
## `@FeignClient`注解修改的客户端在被代理时，都会创建一个新的Fegin.Logger实例。我们需要额外指定这个日志的级别才可以。
#logging:
#  level:
#    com.ep: debug
## 参数计算重试的次数：MaxAutoRetries+MaxAutoRetriesNextServer+(MaxAutoRetries *MaxAutoRetriesNextServer) 即重试3次 则一共产生4次调用
#ribbon:
#  ConnectTimeout: 1000 # 连接超时时间(ms)
#  ReadTimeout: 2000 # 通信超时时间(ms)
#  MaxAutoRetriesNextServer: 1 # 同一服务不同实例的重试次数，不包括首次调用
#  MaxAutoRetries: 1 # 同一实例的重试次数，不包括首次调用
#info:
#  app:
#    version: 1.1
#    name: ep-gatway